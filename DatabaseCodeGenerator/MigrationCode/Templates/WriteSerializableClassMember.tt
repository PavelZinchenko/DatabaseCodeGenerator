<#@ template language="C#" #>
<#@ import namespace="Schema" #><#+
		private string GetDefaultValue(XmlClassMember member, DatabaseSchema schema)
		{
			if (string.IsNullOrEmpty(member.@default)) return string.Empty;

			switch (member.type)
			{
				case Constants.TypeEnum:
					return member.typeid + "." + member.@default;
				case Constants.TypeFloat:
					return member.@default + "f";
				default:
					return member.@default;
			}
		}

		private bool IsStringType(XmlClassMember member)
		{
			switch (member.type)
			{
				case Constants.TypeString:
				case Constants.TypeColor:
				case Constants.TypeImage:
				case Constants.TypeAudioClip:
				case Constants.TypePrefab:
				case Constants.TypeLayout:
				case Constants.TypeFormula:
					return true;
				default:
					return false;
			}
		}

		private void WriteSerializableClassMember(XmlClassMember member, DatabaseSchema schema, bool addAttribute, bool addAssignment)
		{
			var defaultValue = GetDefaultValue(member, schema);
			var assignDefaultValue = string.Empty;
			var hasDefault = !string.IsNullOrEmpty(defaultValue);

			if (IsStringType(member))
			{
				if (addAttribute) WriteLine($"[DefaultValue(\"{defaultValue}\")]");
				if (addAssignment && hasDefault) assignDefaultValue = $" = \"{defaultValue}\"";
			}
			else if (hasDefault)
			{
				if (addAttribute) WriteLine($"[DefaultValue({defaultValue})]");
				if (addAssignment) assignDefaultValue = $" = {defaultValue}";
			}

			if (member.type == Constants.TypeInt)
			{
				WriteLine("public int " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeFloat)
			{
				WriteLine("public float " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeBool)
			{
				WriteLine("public bool " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeString)
			{
				WriteLine("public string " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeColor)
			{
				WriteLine("public string " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeImage)
			{
				WriteLine("public string " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeAudioClip)
			{
				WriteLine("public string " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypePrefab)
			{
				WriteLine("public string " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeLayout)
			{
				WriteLine("public string " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeFormula)
			{
				WriteLine("public string " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeVector)
			{
				WriteLine($"public {Context.VectorType} {member.name}{assignDefaultValue};");
			}
			else if (member.type == Constants.TypeEnum)
			{
				if (!schema.HasEnum(member.typeid))
					throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

				WriteLine("public " + member.typeid + " " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeObject)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				WriteLine("public int " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeObjectList)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				WriteLine("public int[] " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeStruct)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				WriteLine("public " + Utils.SerializableClassName(member.typeid) + " " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeStructList)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				WriteLine("public " + Utils.SerializableClassName(member.typeid) + "[] " + member.name + assignDefaultValue + ";");
			}
			else if (member.type == Constants.TypeEnumFlags)
			{
				if (!schema.HasEnum(member.typeid))
					throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

				WriteLine("public " + member.typeid + "[] " + member.name + assignDefaultValue + ";");
			}
			else
			{
				throw new InvalidSchemaException("Invalid class member type - " + member.type);
			}
		}
#>