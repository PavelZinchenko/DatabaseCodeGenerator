<#@ template language="C#" #>
<#@ import namespace="Schema" #>
<#@ include file="GeneratedCodeWarning.tt" #>

using System;
using System.Collections.Generic;
using <#= ContextNamespace #>.<#= Utils.StorageNamespace #>;
using <#= ContextNamespace #>.<#= Utils.TypesNamespace #>;
using <#= Utils.RootNamespace #>.<#= Schema.Version.ToNamespace() #>.<#= Utils.EnumsNamespace #>;
using <#= Utils.RootNamespace #>.<#= Schema.Version.ToNamespace() #>.<#= Utils.SerializableNamespace #>;

namespace <#= Utils.RootNamespace #>.<#= Schema.Version.ToNamespace() #>.<#= Utils.StorageNamespace #>
{
    public class DatabaseContent : IContentLoader
    {
        public DatabaseContent(IJsonSerializer jsonSerializer, IDataStorage storage)
        {
            _serializer = jsonSerializer;
            storage?.LoadContent(this);
        }

        public int VersionMajor 
        {
            get => <#= Utils.DatabaseSettings #> != null ? <#= Utils.DatabaseSettings #>.DatabaseVersion : <#= Schema.Version.Major #>;
            set => (<#= Utils.DatabaseSettings #> ??= new <#= Utils.SerializableClassName(Utils.DatabaseSettings) #>()).<#= Utils.VersionMajor #> = value;
        }

        public int VersionMinor
        {
            get => <#= Utils.DatabaseSettings #> != null ? <#= Utils.DatabaseSettings #>.DatabaseVersionMinor : 0;
            set => (<#= Utils.DatabaseSettings #> ??= new <#= Utils.SerializableClassName(Utils.DatabaseSettings) #>()).<#= Utils.VersionMinor #> = value;
        }

        public void LoadJson(string name, string content)
        {
            var item = _serializer.FromJson<SerializableItem>(content);
            var type = item.ItemType;

<#
			var first = true;
			foreach (var item in Schema.Objects)
            {
#>
            <#= first ? "if" : "else if" #> (type == <#= Constants.ItemTypeEnum + "." + item.name #>)
            {
			    if (<#= DataMember(item.name) #>.ContainsKey(item.Id)) throw new DatabaseException("Duplicate <#= item.name #> ID - " + item.Id + " (" + name + ")");
                var data = _serializer.FromJson<<#= Utils.SerializableClassName(item.name) #>>(content);
                data.FileName = name;
                <#= DataMember(item.name) #>.Add(data.Id, data);
            }
<#
				first = false;
            }

			foreach (var item in Schema.Configurations)
            {
#>
            <#= first ? "if" : "else if" #> (type == <#= Constants.ItemTypeEnum + "." + item.name #>)
            {
                var data = _serializer.FromJson<<#= Utils.SerializableClassName(item.name) #>>(content);
                data.FileName = name;

				if (<#= item.name #> != null)
                    throw new DatabaseException("Duplicate <#= item.name #> file found - " + name);
                <#= item.name #> = data;
            }
<#
				first = false;
            }
			if (!first)
            {
#>
            else
            {
                throw new DatabaseException("Unknown file type - " + type + "(" + name + ")");
            }
<#
			}
#>
        }

        public void Export(IContentLoader contentLoader)
        {
<#
		    foreach (var item in Schema.Objects)
            {
#>
            foreach (var item in <#= DataMember(item.name) #>.Values)
                contentLoader.LoadJson(item.FileName, _serializer.ToJson(item));
<#
            }

		    foreach (var item in Schema.Configurations)
            {
#>
            if (<#= item.name #> != null)
                contentLoader.LoadJson(<#= item.name #>.FileName, _serializer.ToJson(<#= item.name #>));
<#
            }
#>
            foreach (var item in _images)
                contentLoader.LoadImage(item.Key, item.Value);
            foreach (var item in _audioClips)
                contentLoader.LoadAudioClip(item.Key, item.Value);
            foreach (var item in _localizations)
                contentLoader.LoadLocalization(item.Key, item.Value);
        }

		public void LoadLocalization(string name, string data)
        {
            _localizations.Add(name, data);
        }

        public void LoadImage(string name, <#= Utils.ImageType #> image)
        {
            _images.Add(name, image);
        }

        public void LoadAudioClip(string name, <#= Utils.AudioClipType #> audioClip)
        {
            _audioClips.Add(name, audioClip);
        }

<#
		foreach (var item in Schema.Configurations)
        {
#>
		public <#= Utils.SerializableClassName(item.name) + " " + item.name #> { get; private set; }
<#
        }
#>

<#
		foreach (var item in Schema.Objects)
        {
#>
		public IEnumerable<<#= Utils.SerializableClassName(item.name) #>> <#= Utils.ObjectListPropertyName(item.name) #> => <#= DataMember(item.name) #>.Values;
<#
        }
#>

<#
		foreach (var item in Schema.Objects)
        {
#>
		public <#= Utils.SerializableClassName(item.name) + " " + Utils.ObjectGetterName(item.name) #>(int id) { return <#= DataMember(item.name) #>.TryGetValue(id, out var item) ? item : null; }
<#
        }
#>

        public IEnumerable<KeyValuePair<string, <#= Utils.ImageType #>>> Images => _images;
        public IEnumerable<KeyValuePair<string, <#= Utils.AudioClipType #>>> AudioClips => _audioClips;
        public IEnumerable<KeyValuePair<string, string>> Localizations => _localizations;

        private readonly IJsonSerializer _serializer;

<#
		foreach (var item in Schema.Objects)
        {
#>
		private readonly Dictionary<int, <#= Utils.SerializableClassName(item.name) #>> <#= DataMember(item.name) #> = new();
<#
        }
#>

        private readonly Dictionary<string, <#= Utils.ImageType #>> _images = new(StringComparer.OrdinalIgnoreCase);
        private readonly Dictionary<string, <#= Utils.AudioClipType #>> _audioClips = new(StringComparer.OrdinalIgnoreCase);
        private readonly Dictionary<string, string> _localizations = new(StringComparer.OrdinalIgnoreCase);
	}
}

<#+ 
	private static string DataMember(string name) 
	{ 		
		return "_" + char.ToLower(name[0]) + name.Substring(1) + "Map"; 
	}
#>