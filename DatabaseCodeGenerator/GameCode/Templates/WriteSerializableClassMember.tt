<#@ template language="C#" #>
<#@ import namespace="Schema" #><#+

private string GetDefaultValue(XmlClassMember member, DatabaseSchema schema)
{
	if (string.IsNullOrEmpty(member.@default)) return string.Empty;

	switch (member.type)
	{
		case Constants.TypeEnum:
			return member.typeid + "." + member.@default;
		case Constants.TypeFloat:
			return member.@default + "f";
		default:
			return member.@default;
	}
}

private void WriteSerializableClassMember(XmlClassMember member, DatabaseSchema schema)
{
	//if (member.options.Contains(Constants.OptionObsolete)) return;

	var defaultValue = GetDefaultValue(member, schema);
	if (!string.IsNullOrEmpty(defaultValue)) defaultValue = " = " + defaultValue;
	
	if (!string.IsNullOrEmpty(member.@default))
	{
		switch (member.type)
		{
		case Constants.TypeInt:
		case Constants.TypeBool:
			defaultValue = " = " + member.@default;
			break;
		case Constants.TypeFloat:
			defaultValue = " = " + member.@default + "f";
			break;
		default:
			defaultValue = " = \"" + member.@default + "\"";
			break;
		}
	}

	if (member.type == Constants.TypeInt)
	{
		WriteLine("public int " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeFloat)
	{
		WriteLine("public float " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeBool)
	{
		WriteLine("public bool " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeChar)
	{
		WriteLine("public string " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeString)
	{
		WriteLine("public string " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeColor)
	{
		WriteLine("public string " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeImage)
	{
		WriteLine("public string " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeAudioClip)
	{
		WriteLine("public string " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypePrefab)
	{
		WriteLine("public string " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeLayout)
	{
		WriteLine("public string " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeFormula)
	{
		WriteLine("public string " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeVector)
	{
		WriteLine($"public {Utils.VectorType} {member.name}{defaultValue};");
	}
	else if (member.type == Constants.TypeEnum)
	{
		if (!schema.HasEnum(member.typeid))
			throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

		WriteLine("public " + member.typeid + " " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeObject)
	{
		if (!schema.HasObject(member.typeid))
			throw new InvalidSchemaException("Unknown object type in class member " + member.name);

		WriteLine("public int " + member.name + defaultValue + ";");
	}
	else if (member.type == Constants.TypeObjectList)
	{
		if (!schema.HasObject(member.typeid))
			throw new InvalidSchemaException("Unknown object type in class member " + member.name);

		WriteLine("public int[] " + member.name + ";");
	}
	else if (member.type == Constants.TypeStruct)
	{
		if (!schema.HasStruct(member.typeid))
			throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

		WriteLine("public " + Utils.SerializableClassName(member.typeid) + " " + member.name + ";");
	}
	else if (member.type == Constants.TypeStructList)
	{
		if (!schema.HasStruct(member.typeid))
			throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

		WriteLine("public " + Utils.SerializableClassName(member.typeid) + "[] " + member.name + ";");
	}
	else if (member.type == Constants.TypeEnumFlags)
	{
		if (!schema.HasEnum(member.typeid))
			throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

		WriteLine("public " + member.typeid + "[] " + member.name + ";");
	}
	else
	{
		throw new InvalidSchemaException("Invalid class member type - " + member.type);
	}
}

#>